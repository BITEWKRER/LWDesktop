# 1.搜索歌曲,获取歌曲id# 'https://www.xiami.com/search?key='+ keyword+"&pos=1"# 2.xml页面，可查看网页代码，下载xml文件，并将文件拖入到指定的窗口获得文件路径# 'https://www.xiami.com/widget/xml-single/uid/0/sid/1804846198'+id# 3.获取location# 4.下载音乐# 5. java读取文件夹# 网页播放页面# 'https://www.xiami.com/play?ids=/song/playlist/id/'+id+'/object_name/default/object_id/0#loaded'# 歌曲详细信息页面# https://www.xiami.com/song/1796063337# 实现xml文件下载import mathimport osfrom random import choiceimport reimport sysimport urllib.parsefrom bs4 import BeautifulSoupimport chardet  # 需要导入这个模块，检测编码格式import requestsimport Configureclass Mp3Spider:    header = {'user-agent': choice(Configure.FakeUserAgents),              'Referer': 'https://www.xiami.com/',              }    localUrl = os.path.realpath(__file__)[:-7]    songs_name = []    location = []    SongUrls = {}    flag = "1"    def __init__(self, flag, url):        # print("获取当前文件路径——" + os.path.realpath(__file__))  # 获取当前文件路径        # 美国iTunes榜        # url = 'https://www.xiami.com/billboard/328'        self.flag = flag        # 103         # url = "https://www.xiami.com/billboard/103"        r = requests.get(url, headers=self.header)        html = r.content        soup = BeautifulSoup(html, "html.parser")        # <div class="song-name em"><a href="/song/1802902669">Youngblood</a></div>        i = 0        for div in soup.find_all('div', {'class': 'song-name em'}):            for a in div.find_all('a'):                # print(a.text+" "+a.get('href')[6:])                if i < 12:                    self.SingerId = a.get('href')[6:]                    self.GetLocation()                else:                    break                i += 1                # print(i)    def GetLocation(self):        url = "https://www.xiami.com/widget/xml-single/uid/0/sid/" + self.SingerId        r = requests.get(url, headers=self.header)        xml = r.content        encode_type = chardet.detect(xml)        xml = xml.decode(encode_type['encoding'])        # <location><![CDATA[(.*?)]]></location>        url = re.compile(r'<location><!\[CDATA\[(.*?)\]\]></location>', re.S)        song_name = re.compile(r'<song_name><!\[CDATA\[(.*?)\]\]></song_name>', re.S)        songs_name = re.findall(song_name, xml)        location = re.findall(url, xml)        for i in range(len(songs_name)):            if songs_name != []:                if songs_name[i] != self.SongUrls.get("song_name"):                    self.SongUrls['song_name'] = songs_name[i]                    self.SongUrls['Url'] = self.Decode(location[i])        if self.flag == 1:            print(self.SongUrls.get("song_name"))        elif self.flag == 2:            self.DownloadSong()    def Decode(self, location):        _local10 = ""        _local2 = location[0:1]        _local3 = location[1:]        _local4 = math.floor(len(_local3) / int(_local2))        _local5 = int(len(_local3) % int(_local2))        # _local6 = str(_local2)        _local7 = 0        Url = []        while (_local7 < _local5):            # try:            #     if (Url[_local7] == None):            #         Url[_local7] = ""            # except:            #    e = ""            Url.append(_local3[((int(_local4) + 1) * _local7):                               ((int(_local4) + 1) * _local7) + (int(_local4) + 1)])            _local7 += 1        _local7 = _local5        _local2 = int(_local2)        while (_local7 < _local2):            Url.append(_local3[((int(_local4) * (_local7 - _local5)) + ((int(_local4) + 1) * _local5)):                               ((int(_local4) * (_local7 - _local5)) + ((int(_local4) + 1) * _local5)) + int(                                   _local4)])            _local7 += 1        _local8 = ""        _local7 = 0        while (_local7 < (len((str)(Url[0])))):            _local10 = 0            while (_local10 < len(Url)):                if (_local7 >= len(Url[_local10])):                    break                part = list(Url[_local10])                _local8 = (_local8 + part[_local7])                _local10 += 1            _local7 += 1        _local8 = urllib.parse.unquote(_local8)        _local9 = ""        _local7 = 0        while (_local7 < len(_local8)):            part = list(_local8)            if (_local8[_local7] == '^'):                _local9 = (_local9 + "0")            else:                _local9 = (_local9 + part[_local7])            _local7 += 1        _local9 = _local9.replace("+", " ")        return _local9    def DownloadSong(self):        if not os.path.exists("Download"):            os.makedirs("Download")        for songurl in self.SongUrls:            r = requests.get(self.SongUrls.get("Url"))            filename = "{0:s}.mp3".format(self.SongUrls.get("song_name"))            with open("Download/" + filename, 'wb') as file:                file.write(r.content)            print("Download {0:s} Successfully.".format(self.SongUrls.get("song_name")))if __name__ == '__main__':    a = []    for i in range(1, len(sys.argv)):        a.append(sys.argv[i])    flag = int(a[0])    music_url = int(a[1])    if music_url == 0:        # 新歌榜        url = "https://www.xiami.com/billboard/102"    elif music_url == 1:        # 热歌榜        url = "https://www.xiami.com/billboard/103"    elif music_url == 2:        # 电音榜        url = "https://www.xiami.com/billboard/325"    elif music_url == 3:        # 歌单收录榜        url = "https://www.xiami.com/billboard/306"    elif music_url == 4:        # 抖音热歌榜        url = "https://www.xiami.com/billboard/332"    elif music_url == 5:        # 影视原声榜        url = "https://www.xiami.com/billboard/324"    elif music_url == 6:        # 虾米分享榜        url = "https://www.xiami.com/billboard/307"    Mp3Spider(flag, url)