package function;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.image.BufferedImage;

import common.WavePanel;

public class ExtendTree extends WavePanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private void drawHistogram(float[] amp) {
		float maxAmp;
		int i = 0, y, xi, lastx = 0, lasty = 0, fx = 0, fy = 0, nowx = 0, nowy = 0;
		angle = 0;
		double size = 0, tangle;

		spectrumBufferdImage = new BufferedImage((int) (width * widthm), (int) (height * heightm),
				BufferedImage.TYPE_INT_ARGB);
		spectrumGraphics = (Graphics2D) spectrumBufferdImage.createGraphics();
		spectrumBufferdImage = spectrumGraphics.getDeviceConfiguration().createCompatibleImage((int) (width * widthm),
				(int) (height * heightm), Transparency.TRANSLUCENT);
		spectrumGraphics.dispose();
		spectrumGraphics = spectrumBufferdImage.createGraphics();

		spectrumGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, (RenderingHints.VALUE_ANTIALIAS_ON));

		for (; i != band; i++) {
			// 查找当前频段的最大"幅值"
			maxAmp = 0;
			xi = xplot[i];
			y = xplot[i + 1];
			for (; xi < y; xi++) {
				if (amp[xi] > maxAmp)
					maxAmp = amp[xi];
			}

			y = (maxAmp > Y0) ? (int) ((Math.log10(maxAmp) - logY0) * 15) : 0;
//			y=(int)(Math.pow(y,3)/200);
			switch (histogramType) {
			case 0:
				tangle = angle + rotateangle;
				spectrumGraphics.setColor(new Color(255, 255, 255, 255));
				spectrumGraphics.setStroke(stroke1);

				// 绘制最底层圆,频谱指向圆心
				size = 3.2;
				nowx = (int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size - y / 2));
				nowy = (int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size - y / 2));
				spectrumGraphics.drawOval(nowx, nowy, 4, 4);
//				 绘制中间层
				size = 2.9;
				nowx = (int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size + y / 2));
				nowy = (int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size + y / 2));
				spectrumGraphics.setStroke(stroke2);

				// 连接底层中间层的线
				spectrumGraphics.drawLine(nowx, nowy,
						(int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size - y / 2)),
						(int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size - y / 2)));

				spectrumGraphics.setStroke(stroke3);
				if (lastx != 0 && lasty != 0) {
					spectrumGraphics.drawLine(nowx, nowy, lastx, lasty);
				}
				lastx = nowx;
				lasty = nowy;
				if (i == 0) {
					fx = nowx;
					fy = nowy;
				}

				// 连接最后跟第一
				if (i == band - 1) {
					spectrumGraphics.drawLine(nowx, nowy, fx, fy);

				}
				// 绘制最外层
				spectrumGraphics.setColor(new Color(155, 155, 255));
				spectrumGraphics.setStroke(stroke3);
				size = 2.1;
				nowx = (int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size));
				nowy = (int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size));

				spectrumGraphics.drawLine(nowx, nowy,
						(int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size + y / 2)),
						(int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size + y / 2)));
				// 绘制圆层
				spectrumGraphics.setStroke(stroke1);
				size = 7;
				nowx = (int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size));
				nowy = (int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size));

				spectrumGraphics.drawLine(nowx, nowy,
						(int) (width * widthm) / 2 + (int) (Math.sin(tangle) * (height / size + y / 3)),
						(int) (height * heightm) / 2 - (int) (Math.cos(tangle) * (height / size + y / 3)));

				if (y > 0 && y < 80) {
					if (i % 5 == 0) {

						if (y > 255) {
							spectrumGraphics.setColor(new Color(125, 125, 255, 155));
						} else {
							spectrumGraphics.setColor(new Color(125, 125, 255, y));
						}

						spectrumGraphics.setStroke(stroke4);
						spectrumGraphics.drawOval((int) (width * widthm - (y * 3 + height / 8)) / 2,
								(int) (height * heightm - (y * 3 + height / 8)) / 2, (int) (y * 3 + height / 8),
								(int) (y * 3 + height / 8));
					}

				}

				// 角度增加
				angle += PI * 2 / band;

				break;

			}
		}
		switch (histogramType) {
		case 0:
			spectrumGraphics.setColor(new Color(255, 255, 255, 155));
			spectrumGraphics.drawOval((int) (width * widthm - height / 5) / 2,
					(int) (height * heightm - height / 5) / 2, height / 5, height / 5);
			spectrumGraphics.fillOval((int) (width * widthm - height / 6) / 2 + 1,
					(int) (height * heightm - height / 6) / 2 + 1, (int) (height / 6), (int) (height / 6));

			break;
		}

		repaint();
	}
}
